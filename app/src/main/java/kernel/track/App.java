/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package kernel.track;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.eclipse.jgit.api.Git;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.opencsv.CSVWriter;
import com.opencsv.bean.StatefulBeanToCsv;
import com.opencsv.bean.StatefulBeanToCsvBuilder;
import com.opencsv.exceptions.CsvDataTypeMismatchException;
import com.opencsv.exceptions.CsvRequiredFieldEmptyException;

import kernel.track.models.CVEBean;
import kernel.track.models.KernelCVE;
import kernel.track.utils.StreamPair;


public class App {

    public static void writeCsvFromBeans(Path path, List<CVEBean> beans) {
        try (Writer writer = new FileWriter(path.toString())) {
            StatefulBeanToCsv<CVEBean> sbc = new StatefulBeanToCsvBuilder<CVEBean>(writer)
                .withQuotechar('\'')
                .withSeparator(CSVWriter.DEFAULT_SEPARATOR)
                .build();

            sbc.write(beans);
        } catch (IOException|CsvDataTypeMismatchException|CsvRequiredFieldEmptyException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        String version = "6.1.20";

        System.out.println(System.getProperty("user.dir"));

        ObjectMapper mapper = new ObjectMapper();

        //map json to KernelCVE
        try {
            byte[] kernelCVEsData = Files.readAllBytes(Paths.get("kernel_cves.json"));
            Map<String, KernelCVE> cves = mapper.readValue(kernelCVEsData, new TypeReference<Map<String, KernelCVE>>() {});
            cves.forEach((cveid, cve) -> {
                cve.setId(cveid);
            });

            byte[] streamsData = Files.readAllBytes(Paths.get("stream_data.json"));
            JsonNode streams = mapper.readTree(streamsData);
            // first division by version
            StreamPair sets = StreamPair.of(streams, version);
            System.out.println(String.format("Fixed: %d, unfixed: %d", sets.FIXED.size(), sets.UNFIXED.size()));

            // second division by severity
            sets.FIXED.removeIf((cveid) -> !cves.get(cveid).isHighOrCritical());
            sets.UNFIXED.removeIf((cveid) -> !cves.get(cveid).isHighOrCritical());
            System.out.println(String.format("Fixed: %d, unfixed: %d", sets.FIXED.size(), sets.UNFIXED.size()));

            // third division by commits
            try {
                byte[] fixesData = Files.readAllBytes(Paths.get("stream_fixes.json"));
                JsonNode fixes = mapper.readTree(fixesData);
                // HttpConnectionFactory oldFactory = HttpTransport.getConnectionFactory();
                // HttpTransport.setConnectionFactory(new InsecureHttpConnectionFactory());
                // // clone repo
                // Git kernel = Git.cloneRepository()
                //     .setURI(someURL)
                //     .call();
                // HttpTransport.setConnectionFactory(oldFactory);
                Git kernel = Git.open(new File("./linux"));
                sets.divideBy(fixes, version, kernel);
                kernel.close();
                System.out.println(String.format("Fixed: %d, unfixed: %d", sets.FIXED.size(), sets.UNFIXED.size()));
            } catch (Exception e) {
                e.printStackTrace();
            }

            // convert to dumpable beans
            final List<CVEBean> table = Stream.concat(
                sets.FIXED
                    .stream()
                    .map((cveid) -> new CVEBean(cves.get(cveid), true)),
                sets.UNFIXED
                    .stream()
                    .map((cveid) -> new CVEBean(cves.get(cveid), false)))
                .collect(Collectors.toList());
            writeCsvFromBeans(Paths.get("./report.csv"), table);
        } catch (JsonParseException e) {
            e.printStackTrace();
        } catch (JsonMappingException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
